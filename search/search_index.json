{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Todo","text":"<ol> <li>Use network security concepts for bug bounties. (recon, scanning, vulnerability scanning, exploitation, post exploitation)</li> <li>Be sure to check out \u201cCounter Hack Reloaded\u201d by Ed Skoudis. Has a very thorough explanation of nc.</li> <li>make ask.sh better<ul> <li>tmux shortcut to open up prompt or to see existing chats on topics</li> <li>use opensource instead of chatgpt</li> </ul> </li> <li>make vim undo persist (use undo tree)</li> <li>search cmd history based on directory</li> <li>Use fzf for leader pf in vim to show hidden files</li> <li>Read some books on compilers, static analysis and dynamic analysis</li> <li>Read a book on object oriented design</li> <li>Make exploits for specific CVEs. (e.g.     https://github.com/joeammond/CVE-2021-4034), also check how people post on     exploit-db.</li> <li>Use ssh tunnels with socat to expose a binary to the internet</li> </ol>"},{"location":"productivity/file-structure/","title":"File structure","text":"<p>Notes have been removed from mkdocs docs dir. symlinks to docs dir in particular folders is to be used for compiling notes into one place</p> <p>Some directories are still in notes which I haven't placed outside mkdocs docs. These are: 1. productivity - about the mkdocs and pandoc configuration (Anything to do with automated docs making) 2. terminal - about terminal tips, guides and tools installed</p> <p>For the above files I have not made a separate directory in home folder as they are just notes and are not particular projects or life documents(Documents folder).</p> <p>In Documents folder I have stored files which are not projects. There are folders which can be put into home folder but are kept here to keep home folder clean. Like <code>education/nyu_ms</code> can be in home folder as it has / structure but it is kept here to keep home folder clean. Similar examples are jobs/*, internships/* etc. <p>Directories in home folder should have a decent project size and should hopefully be active projects. Any static folders like Life Documents or very small projects can go in Documents folder.</p> <p>Documents folder (mkdocs will not traverse here) Misc - random documents applications - When you are actively applying to multiple places education - docs related to education (nyu,iitb,bootcamp?) exams - documents related to competitive exams (JEE, GRE, TOEFL, CEH?) internships - (admin documents from internship or dormant project files from ~/work). If research internship was done, admin docs related to the research internship can be kept here eg. UofT) research - dormant research project files can be kept here. If active keep in ~/work.  library - books (reference/novels), pdf guides etc.</p> <ul> <li>Folders from ~/work or ~/personal can go into repsective ~/Documents/(research/job/internships) after they become stagnant or if you do not want to refer to them actively. eg. (<code>securedl and contract_fuzzer</code> being open source research were in ~/personal and then transferred to research)</li> <li>Extremely dormant files like media files or files which you do not need on system will be kept in HDD/SDD.</li> </ul> <p>transferring files between devices ~/personal - projects can be public repos ~/learn - private repos (licensed content), can have public repose if no licensed content ~/finance - SSD (not to be exposed to github) ~/work - SSD (not to be exposed to github) ~/notes - public repo (do not keep private files in ~/notes/docs), use symlinks to private files.</p> <p>research/fuzz-backdoor-cnn is git updated reasearch/blockchain is not git updated (It has multiple directories - needs to be sorted)</p> <p>From now on I'll be using kebab-case not <code>snake_case</code> for my files and directories. I have seen kebab-case everywhere mostly so it'll be easier to collaborate.</p> <p>Transferring ~/personal directories between personal devices can be done through git but only if there are no secrets in the project. eg. telegram-monitor has .env file with API ID and HASH. These projects will have to be moved by SSD for now. Think of a better solution</p>"},{"location":"productivity/guides/","title":"Guides","text":""},{"location":"productivity/guides/#using-mathjax","title":"Using Mathjax","text":""},{"location":"productivity/guides/#fetching-list-of-latex-math-symbols","title":"Fetching list of latex math symbols","text":"<p>Useful links for converting math equations on whiteboard to tex math2tex converter</p> <pre><code>texdoc math symbols\n</code></pre> <p>MathJax is not exactly latex and it converts tex to mathml before processing.</p> <p>Mathjax symbols can be different. For reference use: Mathjax guide</p>"},{"location":"productivity/guides/#references","title":"References","text":""},{"location":"productivity/main/","title":"Main","text":""},{"location":"productivity/main/#features","title":"Features","text":"<ol> <li>A single source of docs which can be accessed on any browser.     a.  Everything that you are learning and working on will be documented in one place</li> <li>Easily editable using vim which can run on all OS and platforms. </li> <li>Ability to switch easily b/w different docs just like switching between different notes on the Notes Mac app</li> <li>The source docs should be easily convertible to different formats without any problems.</li> <li>Support for whiteboard drawings that can be added quickly to the md files.</li> <li>Support for mermaid and PlantUML diagrams</li> <li>Support for math equations</li> </ol>"},{"location":"productivity/main/#thought-process","title":"Thought process","text":""},{"location":"productivity/main/#general","title":"General","text":"<p>I have notes on my Notes Mac app: These notes will only be for notes that have to be edited on mobile as well OR for notes which are not important for learning.</p> <p>To easily switch between different docs, I'll have to make something that can serve the directory structure. This can be done using nginx OR As mentioned in [1], mkdocs can also be used. [2] gives a good overview of using md with vim. As per this document Marked 2 is a good app for integrating with vim on Mac.</p>"},{"location":"productivity/main/#feature-1","title":"Feature 1","text":"<p>To get all the docs in one place I added symlinks of both <code>~/work</code> and <code>~/learn</code> directories to the mkdocs docs directory i.e <code>~/notes/docs</code> To prevent all the source files and images from getting served when running <code>mkdocs serve</code> the files were excluded by adding a regex path in mkdocs exclude config in <code>mkdocs.yml</code>.</p> <p><code>'^(work|learn)\\/(?!(.*\\/docs\\/|.*\\.md$)).*'</code> - rejects all files except .md files and files in docs folder in work and learn\"</p> <p>The above works only if a consistent directory structure is used in work and learn directories.</p> <pre><code>@startyaml\nhi: hello\n@endyaml\n</code></pre> <pre><code>@startyaml\nwork:\n  - project1: #(git)\n      - src:\n          - module1\n          - module2\n      - test\n      - lib\n      - assets:             #(if req for the code build)\n          - img\n          - fonts\n      - build\n      - Makefile\n      - Dockerfile\n      - tools:              #(build scripts;automation)\n          - script1.sh\n      - docs:\n          - res:            #resources\n            - img:\n                - diag1.excalidraw.svg\n                - subdir1_diag1.drawio.svg\n            - misc:\n                - yaml1.yaml\n                - text1.txt\n          - dev.md\n          - user-guide.md\n          - subdir1:\n              - file1.md\n              - file2.md\n      - README.md\n  - project2 #(git)\nlearn:\n  - topic1: #(git)\n      - ref #Reference texts\n      - img\n      - solutions #solutions for self study problems\n      - docs:\n          - res:\n            - img:\n                - diag1.excalidraw.svg\n                - coursera_diag1.drawio.svg\n            - misc:\n                - yaml1.yaml\n                - text1.txt\n          - iitb.md       #iit specific learning\n          - nyu.md\n          - coursera:                     #Directory if required\n              - file1.md\n              - file2.md\n      - iitb:\n          - prev:           #previous year material\n              - 2019\n          - material:\n              - lecture1.ppt\n              - lecture2.pdf\n          - problems:\n              - ass1.pdf\n              - quiz1.pdf\n          - solutions:\n              - soln_ass1.pdf\n              - soln_quiz1.pdf\n          - info.yaml         #(header - instructor;semester;reference;code;spring/fall/summer;year;level;stream)\n      - nyu\n      - coursera\n      - udemy\n      - solve: #(For solving/answering questions on topic)\n          - book_ch1\n          - book_ch2\n          - iitb_ass1\n      - README.md #(For taking notes about the topic)\n  - topic2\nnotes:\n  - build\n  - assets:\n      - js\n      - css\n      - fonts\n  - .gitignore #(contains build/)\n  - mkdocs.yml\n  - tools\n      - script1.sh\n  - docs:\n      - js #(symlinked to assets/js - ideally should not be here at all -  mkdocs limitation)\n      - css #(symlinked to assets/css - ideally should not be here at all -  mkdocs limitation)\n      - fonts #(symlinked to assets/fonts - ideally should not be here at all -  mkdocs limitation)\n      - img #(common imgs)\n      - index.md #(links to all topics)\n      - topic1:\n          - res:\n            - img:\n                - diag1.excalidraw.svg\n                - subdir1_diag1.excalidraw.svg\n                - ss1.png\n                - subdir1_ss1.png\n            - misc:\n                - yaml1.yaml\n                - text1.txt\n          - README.md\n          - subdir1:\n              - file1.md\n              - file2.md\n      - rough\n@endyaml\n</code></pre> <pre><code>flowchart TD\n    A --&gt; B</code></pre>"},{"location":"productivity/main/#feature-4","title":"Feature 4","text":"<p>For point 4 in Features</p> <p>The export to pdf will not allow me to use internal links to separate documents from one doc because one pdf cannot open another pdf. There has to be a conversion mechanism so that I can use internal links to different docs in HTML but also use the same docs to create a single pdf that can reference internal links using heading attributes.</p> <p>To solve this I have narrowed down my docs setup support to:</p> <ol> <li>Mkdocs HTML</li> <li>Pandocs HTML</li> <li>Pandocs PDF</li> </ol> <p>Also, for reference you can look at:</p> <ol> <li>Marked 2 multidoc pdf conversion</li> <li>Readthedocs pdf conversion</li> </ol>"},{"location":"productivity/main/#feature-5","title":"Feature 5","text":"<p>For simple and quick diagrams: Excalidraw For detailed diagrams: Draw.io It should be possible to draw without internet.</p> <p>Excalidraw mostly requires internet but there is a plugin for vscode that enables offline use. You can edit \".excalidraw.svg\", \".excalidraw.png\" and \".excalidraw\" files using the plugin. The \".excalidraw.svg\" and \".excalidraw.png\" files can be rendered in md files as well as edited using plugin, so I will be working with these files. \".excalidraw\" files can be edited using plugin but not rendered in md files.</p>"},{"location":"productivity/main/#svg-or-png","title":"SVG or PNG","text":"<p>Check support for SVG and PNG in all docs that you want to support</p> <p>Mac Screenshots are in PNG. This can be changed to any format. import from iphone is jpeg.</p> <p>Excalidraw vscode extension has an issue due to which existing <code>.excalidraw.svg</code> or '.excalidraw.png' files once edited and saved, the arrows lose the clipping around its text. Issue has been raised on Github.</p> <p>SVG files have to be standalone when embedded in html due to security reasons. Refer [4]. The SVG files created by excalidraw import the font from the internet. The excalidraw font won't be rendered in HTML pages due to this. A good guide on svg fonts [5]</p> <p>In Pandoc MD to HTML conversion, SVG images require rsvg-convert tool to be installed. To install this tool: <pre><code>brew install librsvg\n</code></pre></p> <p>Will have to use PNG since font fetching from SVG is not allowed in browsers. So excalidraw svg diagrams will not work. Other option is to embed font in SVG which would increase size of image. There is no such native option in excalidraw. Will have to write a script to replace the font URL by data uri of font automatically. The file size of embedded font can be reduced by minifying the svg but this is getting too complex. Just go with PNG.</p> <p>The 1x, 2x, 3x options in excali export can be used for getting higher resolution PNGs as checked. Also the file size of PNGs seem to be very large compared to SVG. PFB.</p> <p>-rw-r--r--@ 1 saurabhrajguru  staff    60K Mar 10 18:21 Virgil.woff2 -rw-------@ 1 saurabhrajguru  staff   228K Mar 10 18:07 orp_flow.excalidraw.png -rw-------@ 1 saurabhrajguru  staff    30K Mar 10 20:16 orp_flow.excalidraw.svg -rw-r--r--@ 1 saurabhrajguru  staff   583K Mar 10 18:04 orp_flow@2x.excalidraw.png</p> <p>To use the small sizes I will try using inline SVG. Inline SVG allows using css attributes and importing assets as they become part of the HTML and are not in image tags. Install mkdocs-inline-svg plugin. This plugin replaces the svg reference in the markdown file with the SVG file's content. It doesn't work if the SVG has newlines as it puts a <code>&lt;br/&gt;</code> in place of newlines which breaks the rendering of the SVG image. To sove this run the below command on the svg file to remove newlines. <pre><code>tr -d '\\n' &lt; file.excalidraw.svg &gt; temp &amp;&amp; mv temp file.excalidraw.svg\n</code></pre></p> <p>Two font assets are referenced in ecalidraw generated SVGs: Virgil and Cascadia. Only Virgil is being used in the SVG as I have checked. To use it without internet, you need to replace the reference in the svg file from internet URL to local font file. Downloaded the Virgil font file from Virgil.  Saved it in the <code>diagrams/excalidraw/</code> folder of particular note directory. Commented the internet font request and put the local font file as the reference. </p> <p>Another method to load the font is to use css instead of referencing the font in each excalidraw svg image. Also, the inline svg does not fit into the rendered html. (Maybe it does - it is working after commenting <code>excalidraw.css</code> import in mkdocs.yml) Have added <code>excalidraw.css</code> in <code>docs/css_mkdocs</code> folder for the above two points.</p> <p>As you can see this is a manual process, you can edit the inline-svg plugin to remove the newlines and adding the local font reference while reading the .excalidraw.svg file without editing the excalidraw generated SVG in the file system. Source code is at: mkdocs-inline-ext-svg.</p> <p>Have resolved the manual process:</p>"},{"location":"productivity/main/#issue-2","title":"Issue 2","text":"<p>Issue resolved by using <code>superfences</code> extension in mkdocs. Superfences changes the html format of code blocks due to which language syntax highlighting starts failing with highlight.js that is used by default in mkdocs. To resolve this <code>highlight</code> extension has been added which use an extra css file generated by pygments to highlight the html generated by <code>superfences</code>. To do this the css file is generated for html pages using the below command:</p> <pre><code>pygmentize -S default -f html &gt; pygments.css\n</code></pre> <p>pygments.css is placed in docs/ directory of mkdocs and this is referenced in mkdocs.yml as below:</p> <pre><code>extra_css:\n  - css_mkdocs/pygments.css\n</code></pre>"},{"location":"productivity/main/#feature-6","title":"Feature 6","text":"<p>Refer mermaid mkdocs plugin github site Have downloaded the mermaid js script and added it to <code>docs/js_mkdocs</code> directory so that I can work with it locally It worked with 8.13.10 version. It doesn't work after that: &gt;= 8.14.0  Also copied the default config from https://github.com/facelessuser/pymdown-extensions/blob/main/docs/src/js/material-extra-3rdparty.js Since I am using superfences I used a custom loader used in test/superfences/docs in mermaid mkdocs plugin site. This loader is copied from pymdownx extension site as mentioned in the docs.</p> <pre><code>curl https://unpkg.com/mermaid@8.13.10/dist/mermaid.min.js -o docs/js_mkdocs/mermaid@8.13.10.min.js\n</code></pre> <p>This is referenced in mkdocs.yml as below</p> <pre><code>extra_javascript:\n  - js_mkdocs/mermaid_config.js\n  - js_mkdocs/mermaid@8.13.10.min.js\n  - js_mkdocs/mermaid_loader.js\n</code></pre> <p>There is a problem with mermaid that doesn't allow individual nodes in subgraphs to be connected to other subgraph nodes with the flow of graph intact.  Refer [6]</p> <p>Comparision between Mermaid and PlantUML: Diagrams created for ORP Prod architecture using mermaid and PlantUML to compare their features: mermaid PlantUML</p> <p>Have installed <code>mkdocs_puml</code> plugin for PlantUML which uses online PlantUML server to render diagrams. Refer <code>mkdocs_puml</code> You can self host PlantUML on docker and point it to that to enable offline work.</p>"},{"location":"productivity/main/#a-note-on-diagramming-tools","title":"A note on Diagramming tools","text":"<p>I did extensive reading on multiple diagramming tools, namely:</p> <ol> <li> <p>excalidraw     This tool is more like a rough whiteboard for initial design or collaborating on ideas.</p> <p>This does not support mermaid-js or PlantUML.</p> <p>Conclusion: I won't be using it in the note taking process as I believe I can draw faster using mermaid or PlantUML while taking notes. Also, drawio can be used for proper diagrams. Will use it for explaining to people (to write while drawing) or collab.</p> </li> <li> <p>diagrams.net (drawio)     Mermaid flowcharts can be added as code and individual components are rendered automatically.     PlantUML flowcharts can be added but they get added as a single shape.      This can draw big beautiful diagrams with explicit control on placement.     Since drawio uses default fonts. I can just directly use the SVG generated by drawio without making them inline.</p> <p>Not so editable once created. You'll have to keep changing arrow lengths. drawio.svg can be edited in place but you will not able to understand the diffs in version control systems since it is an svg file.</p> <p>Conclusion: I will use this only if the diagram is finalised or if the diagram is very important.</p> </li> <li> <p>mermaid-js     As mermaid flowcharts can be added directly to drawio, it will also help with final diagram if required.     It is supported by Github and various other platforms.     Better for working with Web side since it is loaded as a JS file.</p> <p>Lesser control on layout and control on components. Version control can be implemented where diffs can be visualised. (Since it is just text!)</p> <p>Conclusion: Will use this for quick diagrams during note taking. </p> </li> <li> <p>PlantUML     Has more control on layout and component formatting than mermaid.     Also it offers a lot more features than mermaid.     Version control can be implemented where diffs can be visualised. (Since it is just text!)</p> <p>It is not supported by Github and other platforms. Gets added as a single shape in drawio. Requires java and GraphViz installation OR server running PlantUML in a container to work locally.</p> <p>Conclusion: Use it for quick technical diagrams while note taking. Good for implementing software modelling frameworks like UML and C4</p> </li> </ol> <p>I also did extensive reading on Modelling frameworks</p> <ol> <li> <p>UML     Broadly divided into: structure diagrams (static aspects) and behaviour diagrams (dynamic aspects)     PlantUML supports some     Mermaid supports fewer</p> </li> <li> <p>C4     Broadly categorises modelling process into the below heirarchy:     System Context, Components, Container, Code</p> <p>PlantUML supports some C4 diagrams.</p> </li> </ol>"},{"location":"productivity/main/#feature-7","title":"Feature 7","text":"<p>Arithmatex: Preserves math in markdown for later processing (Refer [12]) Mathjax: Processes the Latex math to math output (Refer [13]) Added mathjax config, polyfill scripts and mathjax@3.2.2 folder to <code>docs/js_mkdocs/</code> folder. Same will be referenced in mkdocs.yml. The whole folder had to be added for mathjax because the main script references other files from the cdn (eg. fonts) Downloaded the es5 folder from https://github.com/mathjax/MathJax</p> <pre><code>curl -o docs/js_mkdocs/polyfill.min.js \"https://polyfill.io/v3/polyfill.min.js?features=es6&amp;flags=always\"\n</code></pre> <p>\\(\\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}}\\)</p>"},{"location":"productivity/main/#folder-structure","title":"Folder structure","text":"<p> workspaceDifferent work and project foldersSample work folder  excaliimgnotesnotes</p>"},{"location":"productivity/main/#tools","title":"Tools","text":"<p>Refer productivity/tools for tools that I am using for documentation</p>"},{"location":"productivity/main/#issues","title":"Issues","text":""},{"location":"productivity/main/#open","title":"Open","text":"<ol> <li>The syntax highlighting in vim for image alt text is not working when <code>code</code> element has to be put in the alt text.</li> <li>Highlight.js is not allowing pygments.css to do the highlighting. For now I have disabled it.</li> <li>Indented fenced code blocks are not getting syntax highlighted in md files by VIM</li> <li>Puml plugin throws an uncaught error when writing the below content sometimes (ignore the brackets - I put it stop the actual rendering). This interrupts mkdocs.       <code>(puml)       @startuml       @enduml</code></li> <li>As observed puml svgs are getting affected by the <code>excali.css</code> file. They are rendered to fit the page.     mermaid svgs are not getting affected by the css so they are overflowing the page boundary if diagram is big.     Could be because mermaid is getting loaded after loading of page.</li> <li>Table headers are not getting aligned.</li> <li>Blank spaces are automatically removed when converting from md to html. So any manual alignment done with spaces is lost.</li> <li>Notes are not compatible with Github markdown rendering:<ul> <li>Stop using hard line breaks in your notes. With this you can even adhere to 80 character limit for lines.</li> <li>do not use two spaces at the end for line break as they are not easily seen.</li> <li>use bullets if you want new lines.</li> <li>Will have to re format all the docs till now.</li> </ul> </li> </ol>"},{"location":"productivity/main/#closed","title":"Closed","text":"<ol> <li>Indented fenced code blocks are not supported by mkdocs. This is possible in Github [3] and pandoc (checked myself)</li> </ol>"},{"location":"productivity/main/#roadmap","title":"Roadmap","text":"<ol> <li>The Horizontal rule while converting to PDF. The line is not from margin to margin. (Issue)</li> <li>Adding coloring support to text (Feature)</li> <li>Supporting Github Markdown rendering (Github pages) (Feature)</li> <li>The Reference links are getting right aligned due to word wrap when converting from md to pdf (Issue)</li> <li>Single source of docs should be updated irrespective of device (NAS/Cloud) (Feature)</li> <li>Mermaid support in fenced code blocks</li> <li>Indented fenced code blocks in PDFs using pandoc to be checked.</li> </ol>"},{"location":"productivity/main/#references","title":"References","text":"<p>[1] https://medium.com/@TKalippke/all-you-have-to-do-is-type-yourself-494a2c0b2fd6 [2] https://vim.works/2019/03/16/using-markdown-in-vim/ [3] https://stackoverflow.com/questions/6235995/markdown-github-syntax-highlighting-of-code-block-as-a-child-of-a-list#:~:text=Just%20wrap%20your%20code%20blocks,t%20need%20to%20be%20indented. [4] https://stackoverflow.com/questions/29494271/svg-fonts-are-not-loading-on-a-webpage-using-font-face-in-chrome [5] https://css-tricks.com/using-custom-fonts-with-svg-in-an-image-tag/ [6] https://github.com/mermaid-js/mermaid/issues/2509 (mermaid;issue) [7] https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Virgil.woff2 (excalidraw;asset) [8] https://gitlab.com/nicolas.dupont/mkdocs-plugin-inline-svg (mkdocs;inline-svg) [9] https://c4model.com/ (diagramming;c4;software;modelling) [10] https://github.com/fralau/mkdocs-mermaid2-plugin#basic-configuration (mermaid;mkdocs;plugin) [11] https://github.com/MikhailKravets/mkdocs_puml (mkdocs;puml;plugin) [12] https://facelessuser.github.io/pymdown-extensions/extensions/arithmatex/ (mkdocs;math) [13] https://squidfunk.github.io/mkdocs-material/reference/mathjax/ (mkdocs;math)</p>"},{"location":"productivity/password-manager/","title":"Password Managers","text":"<p>I considered three password managers: </p> <ol> <li>1Password</li> <li>Bitwarden</li> <li>NordPass</li> </ol>"},{"location":"productivity/password-manager/#requirements","title":"Requirements","text":"<ol> <li>Passwords to be stored locally</li> <li>Open source</li> <li>CLI integration</li> <li>Should be secure with no bad history</li> <li>Minimum cost as possible without compromising important features like 2FA, sharing with group etc</li> </ol> <p>1Password satisfies requirement numbers: 3,4 and 5</p> <p>Bitwarden Its self hosting product satisfies all 5 of my requirements. Cloud product satisfies all requirements except number 1</p> <p>NordPass Satisfies none of my requirements</p>"},{"location":"productivity/password-manager/#note-on-history-and-privacy","title":"Note on history and privacy","text":"<p>1Password and Bitwarden No history of breaches, regular audits, compliance certified. Cons: Data is stored in USA. Not privacy friendly.</p> <p>NordPass regular audits, compliance certified, Data storage under jurisdiction of Panama (privacy friendly) Cons: NordVPN had a breach once and it was not notified to the public in an appropriate manner https://www.techradar.com/news/whats-the-truth-about-the-nordvpn-breach-heres-what-we-now-know</p>"},{"location":"productivity/password-manager/#decision","title":"Decision","text":"<p>I do not have a private cloud setup yet which will allow me to self host bitwarden and use features like syncing between devices, etc. For now I am using 1Password since all its features are available for free for one year with Github Student Program https://education.github.com/pack and it has a few more features than the Bitwarden cloud offering. Once I have a private cloud setup in my home, I will migrate to Bitwarden self hosting solution.</p>"},{"location":"productivity/password-manager/#links","title":"Links","text":"<p>Nice article on migration and DIY setup https://tidbits.com/2022/04/11/moving-from-1password-to-keepass/</p>"},{"location":"productivity/python-environment/","title":"Python environment set up","text":"<p>Important 1. Usage of virtual environment 2. Never use system python</p> <p>Steps taken: 1. pyenv installed directly from source (no need of system python) 2. Use pyenv to install different versions of python 3. Use <code>pyenv virtualenv</code> to set up virtual environment in python project workspace. It is a wrapper around <code>virtualenv</code> to allow pyenv to handle the virtual environments. 4. Use <code>pip-tools</code> to keep track of packages required for dev, execution etc. (Its required because pip freeze lists all packages required, even packages that are dependencies of the dependencies of the project) 5. Use <code>pipx</code> to install globally available cli tools. eg: tldr</p>"},{"location":"productivity/python-environment/#global-cli-tools","title":"global cli tools","text":"<ol> <li>Keep only one global python (current: 3.12.0).</li> <li>Use it to install and manage <code>pipx</code></li> <li>Use <code>pipx</code> to install global cli tools</li> <li><code>pipx</code> installs cli tools in their own virtual envs in <code>~/.local/pipx/</code> and puts symlink in <code>~/.local/bin</code>[5]</li> <li>This allows global cli tools to be used even in pyenv virtual environments (notes, mkdocs-puml-mod etc)</li> <li>If uninstalling <code>pipx</code> also remove its directory <code>~/.local/pipx</code></li> </ol>"},{"location":"productivity/python-environment/#dependency-manager","title":"dependency manager","text":"<ol> <li>In new virtual environment first use pip to install <code>pip-tools</code></li> <li>Will use <code>pip-tools</code> to manage dependencies and versions</li> <li>Add dependencies (prod and dev) in pyproject.toml and compile with <code>pip-compile</code></li> <li>Use pip-sync to install all packages</li> <li>A trick to uninstall all installed packages is <code>pip-sync &lt;(echo \"\")</code>. This is so because if pip-sync is used on empty requirements file then it syncs will empty file which is no packages at all.</li> </ol>"},{"location":"productivity/python-environment/#unit-tests","title":"Unit tests","text":"<ol> <li>Using <code>pytest</code> for running tests (this has more features than using unittest) Refer [2] [3]</li> <li><code>pytest-cov</code> for getting coverage</li> <li><code>mock</code> will to be used for improving coverage without depending on external code.</li> </ol>"},{"location":"productivity/python-environment/#linter","title":"Linter","text":"<ol> <li>Will be using <code>ruff</code> as the linter for python. Refer [4]</li> <li>Other options are <code>flake8</code> and <code>pylint</code></li> <li><code>ruff</code> if faster than other options. It is written in Rust.</li> <li><code>flake8</code> is good for basic linting and <code>pylint</code> is very strict so you need to set up ignore rules for it to not throw errors.</li> <li><code>ruff</code> is actively being developed. It is in the process of incorporating all rules in <code>pylint</code> and <code>flake8</code></li> </ol>"},{"location":"productivity/python-environment/#references","title":"References","text":""},{"location":"productivity/tips/","title":"Tips","text":""},{"location":"productivity/tips/#attaching-screenshot","title":"Attaching screenshot","text":"<p>To attach a screenshot from mac. Enter the below in the command mode in the vim file you are editing :!mv Once done drag and drop the image to the file you are editing in vim. The path will be added automatically. Now just add the destination path and image name. So it becomes: <pre><code>:!mv &lt;screenshot drag and drop&gt; &lt;dest_folder/image_name&gt;\n</code></pre></p> <p>Originially Markdown was about rendering to HTML. Hence HTML is favoured. Pandoc is about converting to diff docs, hence it discourages HTML and provides other, non-HTMLish ways of representing important document elements like definition lists, tables, mathematics, and footnotes.</p> <p>Markdown does not hyperlink a URL. It needs proper syntax .  gfm is Github Flavoured Markdown (This is what Github uses in its READMEs.)</p> <p>--resource-path needs to be set to the folder where images have to be found for Pandoc. If not set it takes PWD as the default. Refer [2.1]</p> <p>Write good alt texts for images. They are indexed by search engines and are read by screen reader software. They are rendered in the output if the image fails to load. For mkdocs the image path is relative to the location of the md file. For pandocs the image path is relative to the location where you are executing the pandoc command from.</p> <p>When using reference links add the description of URL in () instead of \"\" so that you can use % to jump between () in vim</p>"},{"location":"productivity/tips/#difference-between-marked-2-and-pandoc","title":"Difference between Marked 2 and Pandoc","text":"<p>In gfm you can directly paste a link and it will be hyperlinked. This is not the case with Pandoc's md and md. To enable this, add extension 'autolink_bare_uris'. The reference links in Marked 2 can put in the end without starting a new paragraph. This is not the case in Pandoc. A blank line has to be put before defining the reference links.</p> <p>In Marked 2 - you can have Multimarkdown or Discount (by default: line break in paragraph is preserved. Setting can be changed from preferences) Discount = gfm + alpha lists In pandoc there are multiple markdown formats: gfm, Multi, pandoc(its own md format) etc. pandoc markdown = gfm + alpha lists and much more (by default: line break in paragraph is not preserved. Setting can be changed by adding hard_line_breaks extension)</p> <p>Intra-document links in exported PDFs (As tested they are working in HTML export only) Marked's PDF export currently uses WebKit's print features. One consequence of this is that intra-document (internal) links, including those in a Table of Contents, will not jump to other points in the document. This doesn't appear to be something Apple has any intention of fixing in the version of WebKit that Marked 2 uses.</p>"},{"location":"productivity/tips/#mkdocs","title":"Mkdocs","text":"<p>line break in paragraph had to be enabled by adding nl2br in mkdocs.yaml file. The URLs are not getting hyperlinked by default.</p> <p>Since bare URLs are not supported in OG md, I will be using &lt;&gt; for bare urls in all docs (pandocs as well as Marded 2) since that is supported in OG md and it can be used easily by adding &lt;&gt;</p> <p>When running Mkdocs it checks the working dir for any changes and builds the site in realtime. Vim creates temporary files while it is being edited which leads to some files coming and going and mkdocs server can stop with an error due to that. [4] To resolve this, added a plugin mkdocs_exclude [5], to enable ignoring files</p> <p>For adding reference style links, I will use the below format</p> <p>[[]][] Only external links will be repeated in Reference section so that they can be read on the document. <p>When using numbered list and you want to put content for one point. Use indentation of 4 spaces for the content. If you want to use an indented code block then use 8 spaces. If you want to use fenced code block in numbered list, use 6 spaces. (Because GFM (pandoc and github) use 6 spaces)</p>"},{"location":"productivity/tips/#reference","title":"Reference","text":"<p>[1] https://marked2app.com/help/ [2] https://pandoc.org/MANUAL.html [2.1] https://pandoc.org/MANUAL.html#general-writer-options [3] https://www.mkdocs.org/user-guide/configuration/ [4] https://medium.com/@Aenon/vim-swap-backup-undo-git-2bf353caa02f [5] https://github.com/apenwarr/mkdocs-exclude</p>"},{"location":"productivity/tools/","title":"Tools","text":""},{"location":"productivity/tools/#tools","title":"Tools","text":"<ol> <li>Marked 2 markdown viewer that updates on real time on .md file edit</li> <li>Pandocs Installed using brew. requires pdflatex package to be installed separately for md to pdf conversion</li> <li>Mkdocs Requires python installation</li> </ol> <p>BasicTex This has to be used for lightweight tex to pdf conversion. Refer [1]</p>"},{"location":"productivity/vpn-set-up/","title":"Using openvpn for now","text":"<p>Have set up account and deployed  <pre><code>curl -O https://network-management-gw.openvpn.com/network-gate/api/v1/scripts/VWJ1bnR1IDIyLjA0/gateway/ubuntu_22_04.sh\nchmod +x ubuntu_22_04.sh\n./ubuntu_22_04.sh\n</code></pre></p>"},{"location":"productivity/website/","title":"My Website","text":"<p>inspired from https://0ut3r.space/</p> <p>Since I am accustomed to using mkdocs for my personal notes, I will use it instead of hexo.io which is used by outer.space. I will use material theme for mkdocs since it has many custom features.</p>"},{"location":"productivity/website/#font","title":"Font","text":"<p>outer.space uses cactus theme of hexo which uses <code>Menlo</code> or <code>Meslo-LG</code> font.</p> <p>Material for MkDocs uses <code>Roboto</code> font.</p> <p>To make it look like Menlo font. I will use <code>Roboto Mono</code> font for body text.</p>"},{"location":"productivity/website/#color","title":"Color","text":"<p>Using <code>stale</code> palette with <code>black</code> as primary color for material for mkdocs.</p>"},{"location":"productivity/website/#logo","title":"Logo","text":"<p>Used chatgpt 4 to generate a logo for my website.</p> <pre><code>Create an image of a logo depicting a blue digital fortress being attacked by a\ndark red sea, symbolizing a cyber attack. The fortress should have a futuristic,\ndigital appearance with circuit-like patterns and pixel textures. The dark red\nsea should look dynamic and aggressive. The entire image should have no\nbackground, focusing solely on the contrasting colors and elements of the blue\nfortress and the red sea attack.\n</code></pre> <p>Crop and remove background in Adobe Photoshop</p> <p></p>"},{"location":"productivity/website/#email","title":"Email","text":"<p>Wanted a secure email provider. So, I chose tutanota. Also used by outer.space. Created pgp key for bluered@tuta.io</p>"},{"location":"productivity/website/#pgp-key","title":"PGP key","text":"<pre><code>gpg --full-generate-key\n# chose default options\ngpg --armor --export bluered@tuta.io &gt; public.key # export public key\n</code></pre> <p>uploaded private key in 1password as a secure note.</p> <p>export to keyserver</p> <pre><code>gpg --export bluered@tuta.io | curl -T - https://keys.openpgp.org\n</code></pre>"},{"location":"productivity/website/#social-icons","title":"Social icons","text":"<p>Refer https://squidfunk.github.io/mkdocs-material/reference/icons-emojis/</p>"},{"location":"productivity/website/#rss-feed-and-git-revision-dates","title":"Rss feed and git revision dates","text":"<p>rss and git-revision plugin require complete git history to get created dates if not manually configured. So, in workflow yaml for checkout action the following line is added.</p> <pre><code>- name: Checkout\n  uses: actions/checkout@v4\n  with:\n    fetch-depth: 0\n</code></pre>"},{"location":"terminal/guides/","title":"Guides","text":""},{"location":"terminal/guides/#in-place-editing-with-sed","title":"In place editing with sed","text":"<p>Linux(GNU) and Mac(BSD) sed versions are different</p> <p>Linux <pre><code>sed -i 's/&lt;text&gt;/&lt;replace&gt;/g'\n</code></pre></p> <p>Mac <pre><code># '' is for empty backup file\nsed -i '' 's/&lt;text&gt;/&lt;replace&gt;/g'\n</code></pre></p>"},{"location":"terminal/guides/#changing-extension-of-all-files-in-a-folder","title":"Changing extension of all files in a folder","text":"<p>https://stackoverflow.com/questions/9558986/what-does-the-curly-brace-syntax-var-mean/9559024#9559024</p> <pre><code># Rename all *.txt to *.md\nfor file in *.txt; do\n    mv -- \"$file\" \"${file%.txt}.md\"\ndone\n</code></pre> <p><code>*.txt</code> is a globbing pattern, using * as a wildcard to match any string. <code>*.txt</code> matches all filenames ending with '.txt'. <code>--</code> marks the end of the option list. This avoids issues with filenames starting with hyphens. <code>${file%.txt}</code> is a parameter expansion, replaced by the value of the file variable with .txt removed from the end. Also see the entry on why you shouldn't parse ls.</p> <p>Add and remove commong pattern from all files in folder</p> <pre><code>ls\n#1-web.pdf   2-web.pdf\n\n#required\nls\n#osc_ch1.pdf osc_ch2.pdf\n</code></pre> <p>https://stackoverflow.com/questions/27658675/how-to-remove-last-n-characters-from-a-string-in-bash</p> <pre><code>for file in *.pdf; do\n    mv -- \"$file\" \"osc_ch${file:0:-8}.pdf\"\ndone\n</code></pre>"},{"location":"terminal/guides/#removing-new-lines-from-file","title":"Removing new lines from file","text":"<p>https://stackoverflow.com/questions/3134791/how-do-i-remove-newlines-from-a-text-file https://stackoverflow.com/questions/1251999/how-can-i-replace-each-newline-n-with-a-space-using-sed</p> <pre><code>tr -d '\\n' &lt; file.txt\n</code></pre> <p>OR</p> <pre><code>awk '{ printf \"%s\", $0 }' file.txt\n</code></pre> <p>OR</p> <p>Below is for GNU sed (Linux one); Mac uses BSD sed <pre><code>sed ':a;N;$!ba;s/\\n//g' file.txt\n</code></pre></p> <p>This will read the whole file in a loop (':a;N;$!ba), then replaces the newline(s) with a space (s/\\n/ /g). Additional substitutions can be simply appended if needed.</p> <p>Explanation:</p> <ol> <li>sed starts by reading the first line excluding the newline into the pattern space.</li> <li>Create a label via :a.</li> <li>Append a newline and next line to the pattern space via N.</li> <li>If we are before the last line, branch to the created label \\(!ba (\\)! means not to do it on the last line. This is necessary to avoid executing N again, which would terminate the script if there is no more input!).</li> <li>Finally the substitution replaces every newline with a space on the pattern space (which is the whole file).</li> </ol> <p>Here is cross-platform compatible syntax which works with BSD and OS X's sed (as per @Benjie comment):</p> <p>Mac syntax below <pre><code>sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n/ /g' file.txt\n</code></pre></p> <p>sed is not good for this job (inefficient). Use tr (best) or awk (inefficient).</p>"},{"location":"terminal/guides/#tmux-sessionizerbash","title":"tmux-sessionizer.bash","text":"<p>type: bash description: A script created for fuzzy finding a folder and create/switch tmux session with that folder. The script is added to <code>~/.dotfiles/bin/.local/scripts/</code>. This folder is symlinked to <code>~/.local/scripts/</code> which is added to PATH env variable in <code>.zshrc</code>  learnings:   - usage of $() to use output of bash command in script   - use of if condition in bash</p>"},{"location":"terminal/guides/#if-condition-in-bash","title":"If condition in bash","text":"<p><pre><code>if &lt;something that returns a status code&gt; ; then\n    echo \"true\"\nelse\n    echo \"false\"\nfi\n</code></pre> The condition is not a boolean. If the condition returns a 0 status code then the if body is executed, for any other status code other conditions are checked.</p> <p>To check a boolean condition use [[]]. Refer <code>man bash</code> The [[]] returns 0 if the boolean is true, else it returns false. <pre><code>if [[ boolean ]] ; then\nfi\n</code></pre></p> <p>To check the exit status code to see what the condition is actually returning. Run the command sequence for which you want to check the exit status. Then run <code>echo $?</code>. This gives the exit status code of the last run command in bash/zsh.</p> <p>For running bash in string form <code>bash -c \"&lt;bash string&gt;\"</code></p> <p>Command substitution <code>bash -c \"if  [[ $( echo -e \"hi\\nhello\" | grep \"hi\" -c ) -eq 0 ]]; then echo \"success\"; fi\"</code></p>"},{"location":"terminal/guides/#validate_yamlpy","title":"<code>validate_yaml.py</code>","text":"<p>type: python description: Validates yaml passed using stdin. learnings:   - using pyyaml module to validate yaml   - python help() function for getting help on python keywords   - taking input from stdin in python using sys module   - creating my first python script (making it executable)   - passing visual selection from vim to any shell command</p>"},{"location":"terminal/guides/#openvbash","title":"<code>openv.bash</code>","text":"<p>since op plugin init gh requires the 1password gui app to be installed, it can't be automated. Will manually take access token from op and put in environment as <code>GITHUB_TOKEN</code>. Also <code>op run -- gh</code> could have been used but the gh output is not formatted well when using this.</p> <p>https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced</p> <pre><code>(return 0 2&gt;/dev/null) &amp;&amp; sourced=1 || sourced=0 #The return statement will raise an error if you try to execute it outside of a function or if the script is not sourced\n</code></pre> <p>Grouping: https://www.gnu.org/software/bash/manual/bash.html#Command-Grouping</p>"},{"location":"terminal/guides/#asksh","title":"<code>ask.sh</code>","text":"<p>sends query to chatgpt. use <code>openv</code> to load openai token into environment before running</p> <p>Usage: ask.sh \"\"  <p>https://javabydeveloper.com/how-to-use-chatgpt-api-with-curl/ </p>"},{"location":"terminal/guides/#piping-to-nc-is-complex","title":"Piping to nc is complex","text":"<p><code>echo \"hi\" | nc host port</code> This will send \"hi\" to nc and then nc will close connection. To keep the connection open after sending \"hi\" use below: <code>cat &lt;(echo \"hi\") - | nc host port</code> This will keep stdin open as cat command will wait for stdin due to \"-\" . <code>&lt;()</code> is process substitution in bash. Refer https://www.gnu.org/software/bash/manual/bash.html#Process-Substitution https://superuser.com/questions/261900/how-can-i-pipe-commands-to-a-netcat-that-will-stay-alive As I see it the netcat command will hold the socket open until it sees end of input. All these examples demonstrate this without actually saying much about why. I am interacting with SocketTest server using netcat for an extended period just using: cat -  |  nc   localhost  8063. SocketTest is a handy tool that can listen or serve on any TCP or UDP port.</p>"},{"location":"terminal/package_manager/","title":"Package manager","text":"<p>To check if any package is using the specified package <pre><code>brew uses --recursive --installed boost\nsolidity\n</code></pre></p> <p>To check the dependencies of a package <pre><code>brew deps --tree --installed solidity  \nsolidity\n\u2514\u2500\u2500 boost\n    \u251c\u2500\u2500 icu4c\n    \u251c\u2500\u2500 xz\n    \u2514\u2500\u2500 zstd\n        \u251c\u2500\u2500 lz4\n        \u2514\u2500\u2500 xz\n</code></pre></p> <p>To remove the unused dependencies Refer [1] <pre><code>brew autoremove\n</code></pre></p> <p>So to uninstall package with all its dependencies <pre><code>brew uninstall &lt;package&gt;\nbrew autoremove\n</code></pre></p> <p>To check size of installed brew packages <pre><code>brew list --formula | xargs -n1 -P8 -I {} \\\n    sh -c \"brew info {} | egrep '[0-9]* files, ' | sed 's/^.*[0-9]* files, \\(.*\\)).*$/{} \\1/'\" | \\\n    sort -h -r -k2 - | column -t\n</code></pre></p>"},{"location":"terminal/package_manager/#references","title":"References","text":"<p>[1] https://stackoverflow.com/questions/7323261/uninstall-remove-a-homebrew-package-including-all-its-dependencies</p>"},{"location":"terminal/tools/","title":"Tools","text":"<p>This doc explains the tools that I am using.</p>"},{"location":"terminal/tools/#installed","title":"Installed","text":""},{"location":"terminal/tools/#brew","title":"brew","text":"<p>Productivity <pre><code>brew install fzf\nbrew install fd\nbrew install stow\nbrew install tmux\nbrew install 1password-cli (password manager)\n</code></pre></p> <p>Help <pre><code>brew install tldr\n</code></pre></p> <p>Document creation <pre><code>brew install pandoc\nbrew install --cask basictex (Run: eval \"$(/usr/libexec/path_helper)\" to get the cli tools ready without restarting terminal. Only for zsh and bash users)\n# To enable automatic docs build of new tex packages and build docs for current packages\nsudo tlmgr update --self\nsudo tlmgr install texdoc\nsudo tlmgr option docfiles 1\nsudo tlmgr install --reinstall $(tlmgr list --only-installed | sed -E 's/i (.*):.*$/\\1/')\nbrew install librsvg (To handle SVG images in md to pdf conversion using pandoc and basictex)\n</code></pre></p> <p>Handling json, xml, yaml, toml <pre><code>brew install jq\nbrew install yq\n</code></pre></p> <p>CTF tools <pre><code>brew install exiftool (To read/write metadata of various files)\nbrew install binwalk (To find embedded files inside a file)\nbrew tap Gallopsled/pwntools-binutils https://github.com/Gallopsled/pwntools-binutils  (Binutils required for pwn tools in python)\nbrew install -s /usr/local/Homebrew/Library/Taps/gallopsled/homebrew-pwntools-binutils/macos/binutils-amd64.rb\nbrew install nasm (To run assembly code)\nbrew install gdb (debugger for cli)\nbrew install tesseract (image to text OCR)\n</code></pre></p>"},{"location":"terminal/tools/#pip","title":"pip","text":"<pre><code>pip3 install mkdocs\npip3 install mkdocs-exclude\npip3 install pymdown-extensions (For superfences extension - enables indented fenced code blocks, this is supported by gfm)\npip3 install pygments (For working with pymdownx.highlight and pymdownx.superfences in mkdocs)\npip3 install mkdocs-plugin-inline-svg-mod (For allowing import of fonts in svg generated by ecalidraw)\npip3 install mkdocs_puml (For enabling puml code blocks)\npip3.11 install pwn (Needs binutils as per pwntools documentation see above)\npip3.11 install tesseract (To use tesseract binary in python; you need to install tesseract with brew first)\npip3.11 install python-dotenv (For using .env file to hide variables in python)\n</code></pre> <p>pip publishing tools</p> <p>pip3 install pyyaml #Validating yaml</p> <p>pip3 install telethon #For using telegram API. Refer [2] [3]</p> <p>pip3 install pix2tex #For converting math images to latex</p>"},{"location":"terminal/tools/#use","title":"Use","text":"<ol> <li>Vim The vim configuration documentation can be seen in ~/.vimrc file</li> <li>Vimium Used for using vim keybindings in browser. Have installed as an extension in chrome.</li> <li>fzf Used for fuzzy searching in vim and terminal</li> <li>zsh Used as the terminal. The configuration can be seen in ~/.zshrc</li> </ol>"},{"location":"terminal/tools/#tool-info","title":"Tool info","text":""},{"location":"terminal/tools/#vim","title":"Vim","text":"<p>As checked while using mkdocs, mkdocs watches the directory for any changes and performs a new build. In Vim, there are backup files that are created while editing. These backup files end with '.md~' by default. While writing vim writes the updates to the files in the backup file and then deletes the original file and then renames the backup file to the original file [1]. This step results in error in mkdocs because the orginal file is getting deleted which is then not found in mkdocs. To resolve this, I have set backupcopy to \"yes\" for md files which creates the backup file but the edits happen to original file and then the backup file is removed. Refer \":help backup\" in vim.</p>"},{"location":"terminal/tools/#references","title":"References","text":"<p>[1] https://stackoverflow.com/questions/607435/why-does-vim-save-files-with-a-extension [2] https://stackoverflow.com/questions/56295761/how-to-get-a-message-from-telegram-groups-by-api (telegram;api) [3] https://github.com/LonamiWebs/Telethon (telegram;api)</p>"}]}